from datetime import datetime
import os

from aiogram import Router, F
from aiogram.client.session import aiohttp
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, URLInputFile, FSInputFile, Message, ReplyKeyboardRemove
from aiohttp import ClientSession
from asgiref.sync import sync_to_async

from admin_panel.config import settings
from bot.src.keyboards.main_menu import get_categories_keyboard, get_subcategories_keyboard, get_menu_keyboard, \
    get_buttons_for_products, get_button_for_cart_item, get_buttons_for_cart_item_delete, get_checkout_keyboard, \
    confirm_keyboard, pay_order
from bot.src.services.states import DeliveryState
from bot.src.services.utils import AddTaskState, get_subcategories_page, get_subcategory, \
    get_products_subcategory, get_product, get_or_create_cart_item, get_or_create_cart, register_user, \
    get_user_telegram, get_cart_items, delete_product_cart_item, delete_all_cart_item, create_an_order, \
    save_order_delivery, update_order_status, update_product, get_cart_items_for_user, delete_cart_item

router = Router()


@router.callback_query(F.data == "catalog")
async def show_categories(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–∞–ª–æ–≥–∞."""

    keyboard = await get_categories_keyboard(page=1)
    await callback.message.edit_text(
        "üìö <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("categories_"))
async def show_categories_page(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""

    page = int(callback.data.split("_")[1])
    keyboard = await get_categories_keyboard(page=page)
    await callback.message.edit_text(
        "üìö <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "main_menu")
async def return_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""

    try:
        await callback.answer()
        keyboard = get_menu_keyboard()
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=keyboard
        )
        await state.set_state(AddTaskState.waiting_for_task)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("select_category_"))
async def select_category(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    try:
        category_id = int(callback.data.split("_")[2])
        keyboard = await get_subcategories_keyboard(category_id=category_id, page=1)
        await callback.message.edit_text(
            "üìö <b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    finally:
        await callback.answer()


@router.callback_query(F.data.startswith("subcategories_"))
async def show_subcategories_page(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""

    _, category_id, page = callback.data.split("_")
    keyboard = await get_subcategories_keyboard(
        category_id=int(category_id),
        page=int(page)
    )

    await callback.message.edit_text(
        "üìö <b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("select_subcategory_"))
async def select_subcategory(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –≤—ã–≤–æ–¥–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""

    try:
        subcategory_id = int(callback.data.split("_")[2])
        subcategory = await get_subcategory(subcategory_id)

        if not subcategory:
            await callback.answer("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        products = await get_products_subcategory(subcategory_id)

        if not products:
            await callback.message.edit_text(
                f"<b>{subcategory.title}</b>\n\n–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                parse_mode="HTML"
            )
            return

        await callback.message.edit_text(
            f"<b>üìã {subcategory.title}</b>",
            parse_mode="HTML"
        )

        for product in products:
            keyboard = await get_buttons_for_products(product_id=product.id)
            product_text = (
                f"<b>üõí {product.title}</b>\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n"
                f"üí∞ –¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
            )

            if product.image:
                try:
                    # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                    image_path = os.path.join(settings.MEDIA_ROOT, str(product.image))

                    if os.path.exists(image_path):
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
                        await callback.message.answer_photo(
                            photo=FSInputFile(image_path),
                            caption=product_text,
                            parse_mode="HTML",
                            reply_markup=keyboard
                        )
                    else:
                        await callback.message.answer(
                            f"{product_text}\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
                            parse_mode="HTML",
                            reply_markup=keyboard
                        )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                    await callback.message.answer(
                        f"{product_text}\n–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
            else:
                await callback.message.answer(
                    product_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
        keyboard_cart = await get_button_for_cart_item()
        await callback.message.answer("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É", reply_markup=keyboard_cart)
        await callback.answer()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)


@router.callback_query(F.data.startswith("decrease_"))
async def decrease_product_in_cart(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ."""

    try:
        data = callback.data.split("_")

        product_id = int(data[1])
        quantity = int(data[2]) if len(data) > 2 else 1

        new_quantity = max(1, quantity - 1)

        new_keyboard = await get_buttons_for_products(product_id=product_id, quantity=new_quantity)

        if str(quantity) != str(new_quantity):
            await callback.message.edit_reply_markup(reply_markup=new_keyboard)
            await callback.answer()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("increase_"))
async def increase_product_in_cart(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ."""

    try:
        data = callback.data.split("_")

        product_id = int(data[1])
        quantity = int(data[2])

        product = await get_product(product_id)
        if (quantity + 1) <= product.stock:
            new_quantity = quantity + 1
            new_keyboard = await get_buttons_for_products(product_id=product_id, quantity=new_quantity)
            if str(quantity) != str(new_quantity):
                await callback.message.edit_reply_markup(reply_markup=new_keyboard)
                await callback.answer()
        else:
            await callback.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ {product.stock} —à—Ç.")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_product_to_cart_item(callback: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã."""

    try:
        data = callback.data.split("_")
        product_id = int(data[3])
        quantity = int(data[4])

        product = await get_product(product_id)

        try:
            cart = await get_or_create_cart(callback.from_user.id)
            try:
                await get_or_create_cart_item(cart=cart, product=product, quantity=quantity)
                await callback.answer(f"{product.title} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity} —à—Ç. –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")
            except Exception as ec:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã: {ec}")
        except Exception as eu:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã: {eu}")
    except Exception as ex:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {ex}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)


@router.callback_query(F.data == "show_cart")
async def get_cart_item(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É."""

    try:
        user_id = callback.from_user.id
        try:
            cart = await get_or_create_cart(user_id)

            cart_items = await get_cart_items(cart)

            if not cart_items:
                await callback.message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
                await callback.answer()
                return

            await callback.message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:", parse_mode="HTML")

            for item in cart_items:
                product = await sync_to_async(lambda: item.product)()
                keyboard = await get_buttons_for_cart_item_delete(item.id)
                product_text = (
                    f"<b>{product.title}</b>\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n"
                    f"–¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}\n"
                    f"–ò—Ç–æ–≥–æ: {item.quantity * product.price} —Ä—É–±."
                )

                if product.image:
                    try:
                        image_path = os.path.join(settings.MEDIA_ROOT, str(product.image))
                        if os.path.exists(image_path):
                            await callback.message.answer_photo(
                                photo=FSInputFile(image_path),
                                caption=product_text,
                                parse_mode="HTML",
                                reply_markup=keyboard
                            )
                        else:
                            await callback.message.answer(
                                f"{product_text}\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
                                parse_mode="HTML",
                                reply_markup=keyboard
                            )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                        await callback.message.answer(
                            f"{product_text}\n–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                            parse_mode="HTML",
                            reply_markup=keyboard
                        )
                else:
                    await callback.message.answer(
                        product_text,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )

            total = sum(item.product.price * item.quantity for item in cart_items)
            await callback.message.answer(
                f"üí≥ <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total} —Ä—É–±.</b>",
                parse_mode="HTML",
                reply_markup=await get_checkout_keyboard(cart.id, total)
            )

            await callback.answer()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã", show_alert=True)
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã", show_alert=True)


@router.callback_query(F.data.startswith("delete_product_"))
async def delete_product_from_cart_item(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""

    try:
        data = callback.data.split("_")
        # id —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã
        cart_item_id = int(data[2])

        await delete_product_cart_item(cart_item_id)
        await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", show_alert=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)


@router.callback_query(F.data.startswith("delete_all_cart_"))
async def delete_all_from_cart_item(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã."""

    try:
        data = callback.data.split("_")
        cart_id = int(data[-1])
        await delete_all_cart_item(cart_id)
        await callback.answer("–í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω—ã —É–¥–∞–ª–µ–Ω—ã", show_alert=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)


@router.callback_query(F.data.startswith("checkout_"))
async def get_place_on_order(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""

    try:
        data = callback.data.split("_")
        total_price = float(data[-1])
        user_id = callback.from_user.id

        order = await create_an_order(user_id, total_price)

        await state.set_state(DeliveryState.waiting_for_address)
        await state.update_data(order_id=order.id, total_price=total_price)

        await callback.message.answer(
            "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ì–æ—Ä–æ–¥\n"
            "–£–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "–û–º—Å–∫\n"
            "—É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –∫–≤. 25\n",
            reply_markup=ReplyKeyboardRemove()
        )

        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)


@router.message(DeliveryState.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏."""

    try:
        await state.update_data(delivery_address=message.text)
        await state.set_state(DeliveryState.waiting_for_phone)

        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:\n\n"
            "–ü—Ä–∏–º–µ—Ä: +79161234567"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞: {e}")
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@router.message(DeliveryState.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""

    try:
        phone = message.text.strip()
        if not phone.replace('+', '').isdigit():
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

        await state.update_data(phone=phone)
        await state.set_state(DeliveryState.waiting_for_comment)

        await message.answer(
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@router.message(DeliveryState.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–∫–∞–∑—É."""

    try:
        await state.update_data(comment=message.text)

        await state.set_state(DeliveryState.waiting_for_delivery_date)

        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
            "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ü—Ä–∏–º–µ—Ä: 15.05.2023\n\n"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@router.message(DeliveryState.waiting_for_delivery_date)
async def process_delivery_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏."""

    try:
        delivery_date = datetime.strptime(message.text, '%d.%m.%Y').date()
        await state.update_data(delivery_date=delivery_date)

        data = await state.get_data()

        order_summary = (
            "–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n\n"
            f"–ê–¥—Ä–µ—Å: {data['delivery_address']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment', '–Ω–µ—Ç')}\n"
            f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_date.strftime('%d.%m.%Y')}\n"
            f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {data['total_price']} —Ä—É–±.\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:"
        )

        await message.answer(
            order_summary,
            reply_markup=await confirm_keyboard()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞."""

    try:
        data = await state.get_data()

        delivery = await save_order_delivery(
            order_id=data["order_id"],
            address=data['delivery_address'],
            phone=data.get('phone', ''),
            comment=data.get('comment', ''),
            delivery_date=data.get('delivery_date')
        )

        order = await update_order_status(data["order_id"], "processing")

        await callback.message.answer(
            "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {data['order_id']}\n"
            "–ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
            reply_markup=await pay_order(data["order_id"], order.total_price)
        )

        await state.clear()
        try:
            # –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
            cart_items = await get_cart_items_for_user(callback.from_user.id)
            try:
                # –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –∏–∑–º–µ–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ—Å—Ç–∞—Ç–∫–µ
                await update_product(cart_items)
                try:
                    # –æ—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
                    await delete_cart_item(callback.from_user.id)

                    await callback.answer()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
                    await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ—Å—Ç–∞—Ç–∫–µ: {e}")
                await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)


@router.callback_query(F.data.startswith("order_"))
async def accept_payment(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã."""

    data = callback.data.split("_")
    order_id = int(data[1])
    total_price = float(data[2])
